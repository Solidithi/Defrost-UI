/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumberish,
	BytesLike,
	FunctionFragment,
	Result,
	Interface,
	EventFragment,
	AddressLike,
	ContractRunner,
	ContractMethod,
	Listener,
} from "ethers";
import type {
	TypedContractEvent,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedLogDescription,
	TypedListener,
	TypedContractMethod,
} from "./common";

export interface LaunchpoolInterface extends Interface {
	getFunction(
		nameOrSignature:
			| "BASE_PRECISION"
			| "MAX_DECIMALS"
			| "ONE_VTOKEN"
			| "SCALING_FACTOR"
			| "acceptedNativeAsset"
			| "acceptedVAsset"
			| "avgNativeExRateGradient"
			| "changeBlocks"
			| "claimLeftoverProjectToken"
			| "claimOwnerInterest"
			| "claimPlatformFee"
			| "claimProjectTokens"
			| "cumulativeExchangeRate"
			| "emissionRateChanges"
			| "endBlock"
			| "getClaimableProjectToken"
			| "getEmissionRate"
			| "getPoolInfo"
			| "getStakerNativeAmount"
			| "getStakingRange"
			| "getTotalProjectToken"
			| "getTotalStakedVTokens"
			| "getWithdrawableVTokens"
			| "lastNativeExRate"
			| "lastNativeExRateUpdateBlock"
			| "lastProcessedChangeBlockIndex"
			| "maxStakers"
			| "maxVAssetPerStaker"
			| "nativeExRateSampleCount"
			| "owner"
			| "ownerShareOfInterest"
			| "pause"
			| "paused"
			| "platformAdminAddress"
			| "platformFeeClaimed"
			| "projectToken"
			| "recoverWrongToken"
			| "renounceOwnership"
			| "setXCMOracleAddress"
			| "stake"
			| "stakers"
			| "startBlock"
			| "tickBlock"
			| "totalNativeStake"
			| "transferOwnership"
			| "unpause"
			| "unstake"
			| "unstakeWithoutProjectToken"
			| "xcmOracle"
	): FunctionFragment;

	getEvent(
		nameOrSignatureOrTopic:
			| "OwnershipTransferred"
			| "Paused"
			| "ProjectTokensClaimed"
			| "Staked"
			| "Unpaused"
			| "Unstaked"
	): EventFragment;

	encodeFunctionData(
		functionFragment: "BASE_PRECISION",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "MAX_DECIMALS",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "ONE_VTOKEN",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "SCALING_FACTOR",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "acceptedNativeAsset",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "acceptedVAsset",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "avgNativeExRateGradient",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "changeBlocks",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "claimLeftoverProjectToken",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "claimOwnerInterest",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "claimPlatformFee",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "claimProjectTokens",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "cumulativeExchangeRate",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "emissionRateChanges",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "endBlock",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "getClaimableProjectToken",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "getEmissionRate",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "getPoolInfo",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "getStakerNativeAmount",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "getStakingRange",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "getTotalProjectToken",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "getTotalStakedVTokens",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "getWithdrawableVTokens",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "lastNativeExRate",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "lastNativeExRateUpdateBlock",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "lastProcessedChangeBlockIndex",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "maxStakers",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "maxVAssetPerStaker",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "nativeExRateSampleCount",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "ownerShareOfInterest",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "pause", values?: undefined): string;
	encodeFunctionData(functionFragment: "paused", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "platformAdminAddress",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "platformFeeClaimed",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "projectToken",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "recoverWrongToken",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "renounceOwnership",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "setXCMOracleAddress",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "stake",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "stakers",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "startBlock",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "tickBlock",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "totalNativeStake",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "transferOwnership",
		values: [AddressLike]
	): string;
	encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "unstake",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "unstakeWithoutProjectToken",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "xcmOracle",
		values?: undefined
	): string;

	decodeFunctionResult(
		functionFragment: "BASE_PRECISION",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "MAX_DECIMALS",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "ONE_VTOKEN",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "SCALING_FACTOR",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "acceptedNativeAsset",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "acceptedVAsset",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "avgNativeExRateGradient",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "changeBlocks",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "claimLeftoverProjectToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "claimOwnerInterest",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "claimPlatformFee",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "claimProjectTokens",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "cumulativeExchangeRate",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "emissionRateChanges",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "getClaimableProjectToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getEmissionRate",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getPoolInfo",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getStakerNativeAmount",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getStakingRange",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getTotalProjectToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getTotalStakedVTokens",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "getWithdrawableVTokens",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "lastNativeExRate",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "lastNativeExRateUpdateBlock",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "lastProcessedChangeBlockIndex",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "maxStakers",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "maxVAssetPerStaker",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "nativeExRateSampleCount",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "ownerShareOfInterest",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "platformAdminAddress",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "platformFeeClaimed",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "projectToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "recoverWrongToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "renounceOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setXCMOracleAddress",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "startBlock",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "tickBlock",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "totalNativeStake",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "transferOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "unstakeWithoutProjectToken",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "xcmOracle",
		data: BytesLike
	): Result;
}

export namespace OwnershipTransferredEvent {
	export type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike,
	];
	export type OutputTuple = [previousOwner: string, newOwner: string];
	export interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
	export type InputTuple = [account: AddressLike];
	export type OutputTuple = [account: string];
	export interface OutputObject {
		account: string;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectTokensClaimedEvent {
	export type InputTuple = [user: AddressLike, amount: BigNumberish];
	export type OutputTuple = [user: string, amount: bigint];
	export interface OutputObject {
		user: string;
		amount: bigint;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
	export type InputTuple = [user: AddressLike, amount: BigNumberish];
	export type OutputTuple = [user: string, amount: bigint];
	export interface OutputObject {
		user: string;
		amount: bigint;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
	export type InputTuple = [account: AddressLike];
	export type OutputTuple = [account: string];
	export interface OutputObject {
		account: string;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
	export type InputTuple = [user: AddressLike, amount: BigNumberish];
	export type OutputTuple = [user: string, amount: bigint];
	export interface OutputObject {
		user: string;
		amount: bigint;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export interface Launchpool extends BaseContract {
	connect(runner?: ContractRunner | null): Launchpool;
	waitForDeployment(): Promise<this>;

	interface: LaunchpoolInterface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent
	): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(
		event?: TCEvent
	): Promise<this>;

	BASE_PRECISION: TypedContractMethod<[], [bigint], "view">;

	MAX_DECIMALS: TypedContractMethod<[], [bigint], "view">;

	ONE_VTOKEN: TypedContractMethod<[], [bigint], "view">;

	SCALING_FACTOR: TypedContractMethod<[], [bigint], "view">;

	acceptedNativeAsset: TypedContractMethod<[], [string], "view">;

	acceptedVAsset: TypedContractMethod<[], [string], "view">;

	avgNativeExRateGradient: TypedContractMethod<[], [bigint], "view">;

	changeBlocks: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

	claimLeftoverProjectToken: TypedContractMethod<[], [void], "nonpayable">;

	claimOwnerInterest: TypedContractMethod<[], [void], "nonpayable">;

	claimPlatformFee: TypedContractMethod<[], [void], "nonpayable">;

	claimProjectTokens: TypedContractMethod<[], [void], "nonpayable">;

	cumulativeExchangeRate: TypedContractMethod<[], [bigint], "view">;

	emissionRateChanges: TypedContractMethod<
		[arg0: BigNumberish],
		[bigint],
		"view"
	>;

	endBlock: TypedContractMethod<[], [bigint], "view">;

	getClaimableProjectToken: TypedContractMethod<
		[_investor: AddressLike],
		[bigint],
		"view"
	>;

	getEmissionRate: TypedContractMethod<[], [bigint], "view">;

	getPoolInfo: TypedContractMethod<
		[],
		[[bigint, bigint, bigint, bigint]],
		"view"
	>;

	getStakerNativeAmount: TypedContractMethod<
		[_investor: AddressLike],
		[bigint],
		"view"
	>;

	getStakingRange: TypedContractMethod<[], [[bigint, bigint]], "view">;

	getTotalProjectToken: TypedContractMethod<[], [bigint], "view">;

	getTotalStakedVTokens: TypedContractMethod<[], [bigint], "view">;

	getWithdrawableVTokens: TypedContractMethod<
		[_withdrawnNativeTokens: BigNumberish],
		[bigint],
		"view"
	>;

	lastNativeExRate: TypedContractMethod<[], [bigint], "view">;

	lastNativeExRateUpdateBlock: TypedContractMethod<[], [bigint], "view">;

	lastProcessedChangeBlockIndex: TypedContractMethod<[], [bigint], "view">;

	maxStakers: TypedContractMethod<[], [bigint], "view">;

	maxVAssetPerStaker: TypedContractMethod<[], [bigint], "view">;

	nativeExRateSampleCount: TypedContractMethod<[], [bigint], "view">;

	owner: TypedContractMethod<[], [string], "view">;

	ownerShareOfInterest: TypedContractMethod<[], [bigint], "view">;

	pause: TypedContractMethod<[], [void], "nonpayable">;

	paused: TypedContractMethod<[], [boolean], "view">;

	platformAdminAddress: TypedContractMethod<[], [string], "view">;

	platformFeeClaimed: TypedContractMethod<[], [boolean], "view">;

	projectToken: TypedContractMethod<[], [string], "view">;

	recoverWrongToken: TypedContractMethod<
		[_tokenAddress: AddressLike],
		[void],
		"nonpayable"
	>;

	renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

	setXCMOracleAddress: TypedContractMethod<
		[_xcmOracleAddress: AddressLike],
		[void],
		"nonpayable"
	>;

	stake: TypedContractMethod<
		[_vTokenAmount: BigNumberish],
		[void],
		"nonpayable"
	>;

	stakers: TypedContractMethod<
		[arg0: AddressLike],
		[[bigint, bigint] & { nativeAmount: bigint; claimOffset: bigint }],
		"view"
	>;

	startBlock: TypedContractMethod<[], [bigint], "view">;

	tickBlock: TypedContractMethod<[], [bigint], "view">;

	totalNativeStake: TypedContractMethod<[], [bigint], "view">;

	transferOwnership: TypedContractMethod<
		[newOwner: AddressLike],
		[void],
		"nonpayable"
	>;

	unpause: TypedContractMethod<[], [void], "nonpayable">;

	unstake: TypedContractMethod<
		[_vTokenAmount: BigNumberish],
		[void],
		"nonpayable"
	>;

	unstakeWithoutProjectToken: TypedContractMethod<
		[_withdrawnVTokens: BigNumberish],
		[void],
		"nonpayable"
	>;

	xcmOracle: TypedContractMethod<[], [string], "view">;

	getFunction<T extends ContractMethod = ContractMethod>(
		key: string | FunctionFragment
	): T;

	getFunction(
		nameOrSignature: "BASE_PRECISION"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "MAX_DECIMALS"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "ONE_VTOKEN"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "SCALING_FACTOR"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "acceptedNativeAsset"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "acceptedVAsset"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "avgNativeExRateGradient"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "changeBlocks"
	): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
	getFunction(
		nameOrSignature: "claimLeftoverProjectToken"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "claimOwnerInterest"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "claimPlatformFee"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "claimProjectTokens"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "cumulativeExchangeRate"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "emissionRateChanges"
	): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
	getFunction(
		nameOrSignature: "endBlock"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "getClaimableProjectToken"
	): TypedContractMethod<[_investor: AddressLike], [bigint], "view">;
	getFunction(
		nameOrSignature: "getEmissionRate"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "getPoolInfo"
	): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
	getFunction(
		nameOrSignature: "getStakerNativeAmount"
	): TypedContractMethod<[_investor: AddressLike], [bigint], "view">;
	getFunction(
		nameOrSignature: "getStakingRange"
	): TypedContractMethod<[], [[bigint, bigint]], "view">;
	getFunction(
		nameOrSignature: "getTotalProjectToken"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "getTotalStakedVTokens"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "getWithdrawableVTokens"
	): TypedContractMethod<
		[_withdrawnNativeTokens: BigNumberish],
		[bigint],
		"view"
	>;
	getFunction(
		nameOrSignature: "lastNativeExRate"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "lastNativeExRateUpdateBlock"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "lastProcessedChangeBlockIndex"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "maxStakers"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "maxVAssetPerStaker"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "nativeExRateSampleCount"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "owner"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "ownerShareOfInterest"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "pause"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "paused"
	): TypedContractMethod<[], [boolean], "view">;
	getFunction(
		nameOrSignature: "platformAdminAddress"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "platformFeeClaimed"
	): TypedContractMethod<[], [boolean], "view">;
	getFunction(
		nameOrSignature: "projectToken"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "recoverWrongToken"
	): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "renounceOwnership"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "setXCMOracleAddress"
	): TypedContractMethod<
		[_xcmOracleAddress: AddressLike],
		[void],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "stake"
	): TypedContractMethod<[_vTokenAmount: BigNumberish], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "stakers"
	): TypedContractMethod<
		[arg0: AddressLike],
		[[bigint, bigint] & { nativeAmount: bigint; claimOffset: bigint }],
		"view"
	>;
	getFunction(
		nameOrSignature: "startBlock"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "tickBlock"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "totalNativeStake"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "transferOwnership"
	): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "unpause"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "unstake"
	): TypedContractMethod<[_vTokenAmount: BigNumberish], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "unstakeWithoutProjectToken"
	): TypedContractMethod<
		[_withdrawnVTokens: BigNumberish],
		[void],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "xcmOracle"
	): TypedContractMethod<[], [string], "view">;

	getEvent(
		key: "OwnershipTransferred"
	): TypedContractEvent<
		OwnershipTransferredEvent.InputTuple,
		OwnershipTransferredEvent.OutputTuple,
		OwnershipTransferredEvent.OutputObject
	>;
	getEvent(
		key: "Paused"
	): TypedContractEvent<
		PausedEvent.InputTuple,
		PausedEvent.OutputTuple,
		PausedEvent.OutputObject
	>;
	getEvent(
		key: "ProjectTokensClaimed"
	): TypedContractEvent<
		ProjectTokensClaimedEvent.InputTuple,
		ProjectTokensClaimedEvent.OutputTuple,
		ProjectTokensClaimedEvent.OutputObject
	>;
	getEvent(
		key: "Staked"
	): TypedContractEvent<
		StakedEvent.InputTuple,
		StakedEvent.OutputTuple,
		StakedEvent.OutputObject
	>;
	getEvent(
		key: "Unpaused"
	): TypedContractEvent<
		UnpausedEvent.InputTuple,
		UnpausedEvent.OutputTuple,
		UnpausedEvent.OutputObject
	>;
	getEvent(
		key: "Unstaked"
	): TypedContractEvent<
		UnstakedEvent.InputTuple,
		UnstakedEvent.OutputTuple,
		UnstakedEvent.OutputObject
	>;

	filters: {
		"OwnershipTransferred(address,address)": TypedContractEvent<
			OwnershipTransferredEvent.InputTuple,
			OwnershipTransferredEvent.OutputTuple,
			OwnershipTransferredEvent.OutputObject
		>;
		OwnershipTransferred: TypedContractEvent<
			OwnershipTransferredEvent.InputTuple,
			OwnershipTransferredEvent.OutputTuple,
			OwnershipTransferredEvent.OutputObject
		>;

		"Paused(address)": TypedContractEvent<
			PausedEvent.InputTuple,
			PausedEvent.OutputTuple,
			PausedEvent.OutputObject
		>;
		Paused: TypedContractEvent<
			PausedEvent.InputTuple,
			PausedEvent.OutputTuple,
			PausedEvent.OutputObject
		>;

		"ProjectTokensClaimed(address,uint256)": TypedContractEvent<
			ProjectTokensClaimedEvent.InputTuple,
			ProjectTokensClaimedEvent.OutputTuple,
			ProjectTokensClaimedEvent.OutputObject
		>;
		ProjectTokensClaimed: TypedContractEvent<
			ProjectTokensClaimedEvent.InputTuple,
			ProjectTokensClaimedEvent.OutputTuple,
			ProjectTokensClaimedEvent.OutputObject
		>;

		"Staked(address,uint256)": TypedContractEvent<
			StakedEvent.InputTuple,
			StakedEvent.OutputTuple,
			StakedEvent.OutputObject
		>;
		Staked: TypedContractEvent<
			StakedEvent.InputTuple,
			StakedEvent.OutputTuple,
			StakedEvent.OutputObject
		>;

		"Unpaused(address)": TypedContractEvent<
			UnpausedEvent.InputTuple,
			UnpausedEvent.OutputTuple,
			UnpausedEvent.OutputObject
		>;
		Unpaused: TypedContractEvent<
			UnpausedEvent.InputTuple,
			UnpausedEvent.OutputTuple,
			UnpausedEvent.OutputObject
		>;

		"Unstaked(address,uint256)": TypedContractEvent<
			UnstakedEvent.InputTuple,
			UnstakedEvent.OutputTuple,
			UnstakedEvent.OutputObject
		>;
		Unstaked: TypedContractEvent<
			UnstakedEvent.InputTuple,
			UnstakedEvent.OutputTuple,
			UnstakedEvent.OutputObject
		>;
	};
}
