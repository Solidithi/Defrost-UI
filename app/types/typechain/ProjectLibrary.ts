/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumberish,
	FunctionFragment,
	Interface,
	EventFragment,
	AddressLike,
	ContractRunner,
	ContractMethod,
	Listener,
} from "ethers";
import type {
	TypedContractEvent,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedLogDescription,
	TypedListener,
} from "./common";

export interface ProjectLibraryInterface extends Interface {
	getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export namespace ProjectCreatedEvent {
	export type InputTuple = [
		projectId: BigNumberish,
		projectOwner: AddressLike,
	];
	export type OutputTuple = [projectId: bigint, projectOwner: string];
	export interface OutputObject {
		projectId: bigint;
		projectOwner: string;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export interface ProjectLibrary extends BaseContract {
	connect(runner?: ContractRunner | null): ProjectLibrary;
	waitForDeployment(): Promise<this>;

	interface: ProjectLibraryInterface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent
	): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(
		event?: TCEvent
	): Promise<this>;

	getFunction<T extends ContractMethod = ContractMethod>(
		key: string | FunctionFragment
	): T;

	getEvent(
		key: "ProjectCreated"
	): TypedContractEvent<
		ProjectCreatedEvent.InputTuple,
		ProjectCreatedEvent.OutputTuple,
		ProjectCreatedEvent.OutputObject
	>;

	filters: {
		"ProjectCreated(uint64,address)": TypedContractEvent<
			ProjectCreatedEvent.InputTuple,
			ProjectCreatedEvent.OutputTuple,
			ProjectCreatedEvent.OutputObject
		>;
		ProjectCreated: TypedContractEvent<
			ProjectCreatedEvent.InputTuple,
			ProjectCreatedEvent.OutputTuple,
			ProjectCreatedEvent.OutputObject
		>;
	};
}
