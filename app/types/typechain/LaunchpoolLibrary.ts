/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumberish,
	FunctionFragment,
	Interface,
	EventFragment,
	AddressLike,
	ContractRunner,
	ContractMethod,
	Listener,
} from "ethers";
import type {
	TypedContractEvent,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedLogDescription,
	TypedListener,
} from "./common";

export interface LaunchpoolLibraryInterface extends Interface {
	getEvent(nameOrSignatureOrTopic: "LaunchpoolCreated"): EventFragment;
}

export namespace LaunchpoolCreatedEvent {
	export type InputTuple = [
		projectId: BigNumberish,
		poolType: BigNumberish,
		poolId: BigNumberish,
		projectToken: AddressLike,
		vAsset: AddressLike,
		nativeAsset: AddressLike,
		poolAddress: AddressLike,
		startBlock: BigNumberish,
		endBlock: BigNumberish,
	];
	export type OutputTuple = [
		projectId: bigint,
		poolType: bigint,
		poolId: bigint,
		projectToken: string,
		vAsset: string,
		nativeAsset: string,
		poolAddress: string,
		startBlock: bigint,
		endBlock: bigint,
	];
	export interface OutputObject {
		projectId: bigint;
		poolType: bigint;
		poolId: bigint;
		projectToken: string;
		vAsset: string;
		nativeAsset: string;
		poolAddress: string;
		startBlock: bigint;
		endBlock: bigint;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export interface LaunchpoolLibrary extends BaseContract {
	connect(runner?: ContractRunner | null): LaunchpoolLibrary;
	waitForDeployment(): Promise<this>;

	interface: LaunchpoolLibraryInterface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent
	): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(
		event?: TCEvent
	): Promise<this>;

	getFunction<T extends ContractMethod = ContractMethod>(
		key: string | FunctionFragment
	): T;

	getEvent(
		key: "LaunchpoolCreated"
	): TypedContractEvent<
		LaunchpoolCreatedEvent.InputTuple,
		LaunchpoolCreatedEvent.OutputTuple,
		LaunchpoolCreatedEvent.OutputObject
	>;

	filters: {
		"LaunchpoolCreated(uint64,uint8,uint64,address,address,address,address,uint128,uint128)": TypedContractEvent<
			LaunchpoolCreatedEvent.InputTuple,
			LaunchpoolCreatedEvent.OutputTuple,
			LaunchpoolCreatedEvent.OutputObject
		>;
		LaunchpoolCreated: TypedContractEvent<
			LaunchpoolCreatedEvent.InputTuple,
			LaunchpoolCreatedEvent.OutputTuple,
			LaunchpoolCreatedEvent.OutputObject
		>;
	};
}
