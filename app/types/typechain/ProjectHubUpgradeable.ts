/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumberish,
	BytesLike,
	FunctionFragment,
	Result,
	Interface,
	EventFragment,
	AddressLike,
	ContractRunner,
	ContractMethod,
	Listener,
} from "ethers";
import type {
	TypedContractEvent,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedLogDescription,
	TypedListener,
	TypedContractMethod,
} from "./common";

export declare namespace LaunchpoolLibrary {
	export type LaunchpoolCreationParamsStruct = {
		projectId: BigNumberish;
		projectTokenAmount: BigNumberish;
		projectToken: AddressLike;
		vAsset: AddressLike;
		startBlock: BigNumberish;
		endBlock: BigNumberish;
		maxVTokensPerStaker: BigNumberish;
		changeBlocks: BigNumberish[];
		emissionRateChanges: BigNumberish[];
	};

	export type LaunchpoolCreationParamsStructOutput = [
		projectId: bigint,
		projectTokenAmount: bigint,
		projectToken: string,
		vAsset: string,
		startBlock: bigint,
		endBlock: bigint,
		maxVTokensPerStaker: bigint,
		changeBlocks: bigint[],
		emissionRateChanges: bigint[],
	] & {
		projectId: bigint;
		projectTokenAmount: bigint;
		projectToken: string;
		vAsset: string;
		startBlock: bigint;
		endBlock: bigint;
		maxVTokensPerStaker: bigint;
		changeBlocks: bigint[];
		emissionRateChanges: bigint[];
	};
}

export interface ProjectHubUpgradeableInterface extends Interface {
	getFunction(
		nameOrSignature:
			| "MULTICALL_SENDER_SLOT"
			| "createLaunchpool"
			| "createProject"
			| "initialize"
			| "nextPoolId"
			| "nextProjectId"
			| "owner"
			| "pools"
			| "projects"
			| "removeVAssetSupport"
			| "renounceOwnership"
			| "selfMultiCall"
			| "setNativeAssetForVAsset"
			| "transferOwnership"
			| "vAssetToNativeAsset"
			| "xcmOracleAddress"
	): FunctionFragment;

	getEvent(
		nameOrSignatureOrTopic:
			| "Initialized"
			| "OwnershipTransferred"
			| "VAssetMappingUpdated"
	): EventFragment;

	encodeFunctionData(
		functionFragment: "MULTICALL_SENDER_SLOT",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "createLaunchpool",
		values: [LaunchpoolLibrary.LaunchpoolCreationParamsStruct]
	): string;
	encodeFunctionData(
		functionFragment: "createProject",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "initialize",
		values: [AddressLike, AddressLike, AddressLike[], AddressLike[]]
	): string;
	encodeFunctionData(
		functionFragment: "nextPoolId",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "nextProjectId",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "pools",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "projects",
		values: [BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "removeVAssetSupport",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "renounceOwnership",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "selfMultiCall",
		values: [BytesLike[]]
	): string;
	encodeFunctionData(
		functionFragment: "setNativeAssetForVAsset",
		values: [AddressLike, AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "transferOwnership",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "vAssetToNativeAsset",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "xcmOracleAddress",
		values?: undefined
	): string;

	decodeFunctionResult(
		functionFragment: "MULTICALL_SENDER_SLOT",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "createLaunchpool",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "createProject",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "initialize",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "nextPoolId",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "nextProjectId",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "removeVAssetSupport",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "renounceOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "selfMultiCall",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setNativeAssetForVAsset",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "transferOwnership",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "vAssetToNativeAsset",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "xcmOracleAddress",
		data: BytesLike
	): Result;
}

export namespace InitializedEvent {
	export type InputTuple = [version: BigNumberish];
	export type OutputTuple = [version: bigint];
	export interface OutputObject {
		version: bigint;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
	export type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike,
	];
	export type OutputTuple = [previousOwner: string, newOwner: string];
	export interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace VAssetMappingUpdatedEvent {
	export type InputTuple = [vAsset: AddressLike, nativeAsset: AddressLike];
	export type OutputTuple = [vAsset: string, nativeAsset: string];
	export interface OutputObject {
		vAsset: string;
		nativeAsset: string;
	}
	export type Event = TypedContractEvent<
		InputTuple,
		OutputTuple,
		OutputObject
	>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export interface ProjectHubUpgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): ProjectHubUpgradeable;
	waitForDeployment(): Promise<this>;

	interface: ProjectHubUpgradeableInterface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent
	): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(
		event?: TCEvent
	): Promise<this>;

	MULTICALL_SENDER_SLOT: TypedContractMethod<[], [string], "view">;

	createLaunchpool: TypedContractMethod<
		[_params: LaunchpoolLibrary.LaunchpoolCreationParamsStruct],
		[bigint],
		"nonpayable"
	>;

	createProject: TypedContractMethod<[], [void], "nonpayable">;

	initialize: TypedContractMethod<
		[
			_xcmOracleAddress: AddressLike,
			_initialOwner: AddressLike,
			_initialVAssets: AddressLike[],
			_initialNativeAssets: AddressLike[],
		],
		[void],
		"nonpayable"
	>;

	nextPoolId: TypedContractMethod<[], [bigint], "view">;

	nextProjectId: TypedContractMethod<[], [bigint], "view">;

	owner: TypedContractMethod<[], [string], "view">;

	pools: TypedContractMethod<
		[arg0: BigNumberish],
		[
			[bigint, bigint, string, bigint] & {
				poolId: bigint;
				poolType: bigint;
				poolAddress: string;
				projectId: bigint;
			},
		],
		"view"
	>;

	projects: TypedContractMethod<
		[arg0: BigNumberish],
		[[bigint, string] & { projectId: bigint; projectOwner: string }],
		"view"
	>;

	removeVAssetSupport: TypedContractMethod<
		[_vAsset: AddressLike],
		[void],
		"nonpayable"
	>;

	renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

	selfMultiCall: TypedContractMethod<
		[callPayloadBatch: BytesLike[]],
		[string[]],
		"nonpayable"
	>;

	setNativeAssetForVAsset: TypedContractMethod<
		[_vAsset: AddressLike, _nativeAsset: AddressLike],
		[void],
		"nonpayable"
	>;

	transferOwnership: TypedContractMethod<
		[newOwner: AddressLike],
		[void],
		"nonpayable"
	>;

	vAssetToNativeAsset: TypedContractMethod<
		[arg0: AddressLike],
		[string],
		"view"
	>;

	xcmOracleAddress: TypedContractMethod<[], [string], "view">;

	getFunction<T extends ContractMethod = ContractMethod>(
		key: string | FunctionFragment
	): T;

	getFunction(
		nameOrSignature: "MULTICALL_SENDER_SLOT"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "createLaunchpool"
	): TypedContractMethod<
		[_params: LaunchpoolLibrary.LaunchpoolCreationParamsStruct],
		[bigint],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "createProject"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "initialize"
	): TypedContractMethod<
		[
			_xcmOracleAddress: AddressLike,
			_initialOwner: AddressLike,
			_initialVAssets: AddressLike[],
			_initialNativeAssets: AddressLike[],
		],
		[void],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "nextPoolId"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "nextProjectId"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "owner"
	): TypedContractMethod<[], [string], "view">;
	getFunction(nameOrSignature: "pools"): TypedContractMethod<
		[arg0: BigNumberish],
		[
			[bigint, bigint, string, bigint] & {
				poolId: bigint;
				poolType: bigint;
				poolAddress: string;
				projectId: bigint;
			},
		],
		"view"
	>;
	getFunction(
		nameOrSignature: "projects"
	): TypedContractMethod<
		[arg0: BigNumberish],
		[[bigint, string] & { projectId: bigint; projectOwner: string }],
		"view"
	>;
	getFunction(
		nameOrSignature: "removeVAssetSupport"
	): TypedContractMethod<[_vAsset: AddressLike], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "renounceOwnership"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "selfMultiCall"
	): TypedContractMethod<
		[callPayloadBatch: BytesLike[]],
		[string[]],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "setNativeAssetForVAsset"
	): TypedContractMethod<
		[_vAsset: AddressLike, _nativeAsset: AddressLike],
		[void],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "transferOwnership"
	): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "vAssetToNativeAsset"
	): TypedContractMethod<[arg0: AddressLike], [string], "view">;
	getFunction(
		nameOrSignature: "xcmOracleAddress"
	): TypedContractMethod<[], [string], "view">;

	getEvent(
		key: "Initialized"
	): TypedContractEvent<
		InitializedEvent.InputTuple,
		InitializedEvent.OutputTuple,
		InitializedEvent.OutputObject
	>;
	getEvent(
		key: "OwnershipTransferred"
	): TypedContractEvent<
		OwnershipTransferredEvent.InputTuple,
		OwnershipTransferredEvent.OutputTuple,
		OwnershipTransferredEvent.OutputObject
	>;
	getEvent(
		key: "VAssetMappingUpdated"
	): TypedContractEvent<
		VAssetMappingUpdatedEvent.InputTuple,
		VAssetMappingUpdatedEvent.OutputTuple,
		VAssetMappingUpdatedEvent.OutputObject
	>;

	filters: {
		"Initialized(uint64)": TypedContractEvent<
			InitializedEvent.InputTuple,
			InitializedEvent.OutputTuple,
			InitializedEvent.OutputObject
		>;
		Initialized: TypedContractEvent<
			InitializedEvent.InputTuple,
			InitializedEvent.OutputTuple,
			InitializedEvent.OutputObject
		>;

		"OwnershipTransferred(address,address)": TypedContractEvent<
			OwnershipTransferredEvent.InputTuple,
			OwnershipTransferredEvent.OutputTuple,
			OwnershipTransferredEvent.OutputObject
		>;
		OwnershipTransferred: TypedContractEvent<
			OwnershipTransferredEvent.InputTuple,
			OwnershipTransferredEvent.OutputTuple,
			OwnershipTransferredEvent.OutputObject
		>;

		"VAssetMappingUpdated(address,address)": TypedContractEvent<
			VAssetMappingUpdatedEvent.InputTuple,
			VAssetMappingUpdatedEvent.OutputTuple,
			VAssetMappingUpdatedEvent.OutputObject
		>;
		VAssetMappingUpdated: TypedContractEvent<
			VAssetMappingUpdatedEvent.InputTuple,
			VAssetMappingUpdatedEvent.OutputTuple,
			VAssetMappingUpdatedEvent.OutputObject
		>;
	};
}
